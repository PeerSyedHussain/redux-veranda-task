[{"/home/hussain/Documents/redux-veranda-task/src/index.js":"1","/home/hussain/Documents/redux-veranda-task/src/App.js":"2","/home/hussain/Documents/redux-veranda-task/src/reportWebVitals.js":"3","/home/hussain/Documents/redux-veranda-task/src/redux/index.js":"4","/home/hussain/Documents/redux-veranda-task/src/redux/course/courseAction.js":"5","/home/hussain/Documents/redux-veranda-task/src/redux/course/courseType.js":"6","/home/hussain/Documents/redux-veranda-task/src/redux/store.js":"7","/home/hussain/Documents/redux-veranda-task/src/redux/rootReducer.js":"8","/home/hussain/Documents/redux-veranda-task/src/redux/course/courseReducer.js":"9","/home/hussain/Documents/redux-veranda-task/src/AddCourse.js":"10"},{"size":942,"mtime":1607592379901,"results":"11","hashOfConfig":"12"},{"size":39238,"mtime":1607602838349,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1607581955547,"results":"14","hashOfConfig":"12"},{"size":37,"mtime":1607592762397,"results":"15","hashOfConfig":"12"},{"size":314,"mtime":1607598511615,"results":"16","hashOfConfig":"12"},{"size":74,"mtime":1607592469864,"results":"17","hashOfConfig":"12"},{"size":357,"mtime":1607586922113,"results":"18","hashOfConfig":"12"},{"size":189,"mtime":1607586993589,"results":"19","hashOfConfig":"12"},{"size":10327,"mtime":1607601045830,"results":"20","hashOfConfig":"12"},{"size":15285,"mtime":1607602782246,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xvl0fs",{"filePath":"24","messages":"25","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},"/home/hussain/Documents/redux-veranda-task/src/index.js",[],"/home/hussain/Documents/redux-veranda-task/src/App.js",["44","45","46","47","48","49","50","51","52","53","54"],"/home/hussain/Documents/redux-veranda-task/src/reportWebVitals.js",[],["55","56"],"/home/hussain/Documents/redux-veranda-task/src/redux/index.js",[],"/home/hussain/Documents/redux-veranda-task/src/redux/course/courseAction.js",[],"/home/hussain/Documents/redux-veranda-task/src/redux/course/courseType.js",[],"/home/hussain/Documents/redux-veranda-task/src/redux/store.js",[],"/home/hussain/Documents/redux-veranda-task/src/redux/rootReducer.js",[],"/home/hussain/Documents/redux-veranda-task/src/redux/course/courseReducer.js",[],"/home/hussain/Documents/redux-veranda-task/src/AddCourse.js",["57","58"],"import React, { Component } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { Link,withRouter } from 'react-router-dom';\nimport { addNewCourse } from './redux';\n\nclass AddCourse extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            category_option : [\n                {\n                    id : 1,\n                    value : 'IBPS Exams'\n                },\n                {\n                    id : 2,\n                    value : 'Finance Markets'\n                },\n                {\n                    id : 3,\n                    value : 'Economics'\n                },\n                {\n                    id : 4,\n                    value : 'Finance Services'\n                },\n                {\n                    id : 5,\n                    value : 'Statistics'\n                },\n                {\n                    id : 6,\n                    value : 'Data Analysis'\n                },\n                {\n                    id : 7,\n                    value : 'Accountant'\n                },\n                {\n                    id : 8,\n                    value : 'GST'\n                },\n                {\n                    id : 9,\n                    value : 'Market Trend'\n                },\n            ],\n            level_option : [\n                {\n                    id : 1,\n                    value : 'Beginner'\n                },\n                {\n                    id : 2,\n                    value : 'Intermediate'\n                },\n                {\n                    id : 3,\n                    value : 'Expert'\n                },\n            ],\n            price_option : [\n                {\n                    id : 1,\n                    value : 'Free'\n                },\n                {\n                    id : 2,\n                    value : 'Paid'\n                }\n            ],\n            amount : '',\n            languages_option : [\n                {\n                    id : 1,\n                    value : 'Tamil'\n                },\n                {\n                    id : 2,\n                    value : 'English'\n                },\n                {\n                    id : 3,\n                    value : 'Hindi'\n                },\n                {\n                    id : 4,\n                    value : 'Malayalam'\n                },\n                {\n                    id : 5,\n                    value : 'Telugu'\n                },\n            ],\n            setPrice : false,\n            priceValue : 'Free',\n            categoryValue : 'IBPS Exams',\n            levelValue : 'Beginner',\n            langvalue : [],\n            setUploaderName : '',\n            setTotalLesson : '',\n            setCourseName : '',\n            setCourseDesc : '',\n            setCourseImg : '',\n            setProviderImg : '',\n            temp_obj : {\n                id : '',\n                dataCategory : '',\n                dataLevel : '',\n                dataPrice : \"\",\n                dataLanguage : \"\",\n                dataSort : \"Popular\",\n                className : \"course-box\",\n                firstChildClass : \"course-img\",\n                img_url:'',\n                courseName : '',\n                courseDesc : '',\n                courseProviderName : '',\n                courseTotalLesson : '',\n                courseAvailableLang : '',\n                courseProviderImg : '' ,\n                dataCourseAmt : '',\n            }\n        }\n    }\n\n    setPrice = (e) => {\n        // console.log(e.target.value)\n        let price = e.target.value\n        this.setState({\n            priceValue : price\n        },()=> {\n            if(price === 'Paid'){\n                this.setState({\n                    setPrice : true\n                })\n            }\n            else{\n                this.setState({\n                    setPrice : false\n                })\n            }\n        })\n    }\n    setLevel = (e) => {\n        // console.log(e.target.value)\n        let level = e.target.value\n        this.setState({\n            levelValue : level\n        })\n    }\n    setCategory = (e) => {\n        // console.log(e.target.value)\n        let category = e.target.value\n        this.setState({\n            categoryValue : category\n        })\n    }\n\n    setAmount = (e) => {\n        let amount = e.target.value\n        this.setState({\n            amount : amount\n        })\n    }\n\n    setLanguage = (e) => {\n        // console.log(e.target.options)\n        let options = e.target.options\n        let value = []\n\n        for (let i = 0;i < options.length;i++) {\n            if (options[i].selected) {\n                value.push(options[i].value);\n            }\n        }\n        // console.log('val',value.toString())\n        this.setState({\n            langvalue : value\n        })\n    }\n\n    setUploaderName = (e) => {\n        let name = e.target.value\n        this.setState({\n            setUploaderName : name\n        })\n    }\n\n    setTotalLesson = (e) => {\n        let count = e.target.value\n        this.setState({\n            setTotalLesson : count\n        })\n    }\n\n    setCourseName = (e) => {\n        let name = e.target.value\n        this.setState({\n            setCourseName : name\n        })\n    }\n\n    setCourseDesc = (e) => {\n        let paragraph = e.target.value\n        this.setState({\n            setCourseDesc : paragraph\n        })\n    }\n\n    setCourseImg = (e) => {\n        console.log(e.target.files[0])\n        let filename = URL.createObjectURL(e.target.files[0])\n        this.setState({\n            setCourseImg : filename\n        })\n    }\n\n    setProviderImg = (e) => {\n        console.log(e.target.files[0])\n        let filename = URL.createObjectURL(e.target.files[0])\n        this.setState({\n            setProviderImg : filename\n        })\n    }\n\n    addCourse = (e) => {\n        e.preventDefault()\n\n        let language = this.state.langvalue.toString()\n        this.setState(prevState => ({\n            temp_obj: {                   // object that we want to update\n                ...prevState.temp_obj,    // keep all other key-value pairs\n                id : this.props.course_count + 1,\n                dataCategory : this.state.categoryValue,\n                dataLevel : this.state.levelValue,\n                dataPrice : this.state.priceValue,\n                dataLanguage : language,\n                dataSort : \"Popular\",\n                className : \"course-box\",\n                firstChildClass : \"course-img\",\n                img_url:this.state.setCourseImg,\n                courseName : this.state.setCourseName,\n                courseDesc : this.state.setCourseDesc,\n                courseProviderName : this.state.setUploaderName,\n                courseTotalLesson : this.state.setTotalLesson,\n                courseAvailableLang : language,\n                courseProviderImg :  this.state.setProviderImg,\n                dataCourseAmt : this.state.amount,       // update the value of specific key\n            }\n        }),()=> {\n            console.log(this.state.temp_obj)\n            \n            this.props.history.push({\n                pathname: '/',\n                // state: this.state.temp_obj\n            });\n            this.props.newCourse(this.state.temp_obj)\n\n        })\n        // console.log(this.state.categoryValue,this.state.levelValue,this.state.priceValue,\n        //     this.state.amount,this.state.langvalue,this.state.setUploaderName,this.state.setCourseDesc,\n        //     this.state.setCourseName,this.state.setTotalLesson)\n\n    }\n\n    render() {\n         const { category_option,level_option,price_option,setPrice,amount,temp_obj,\n                languages_option,setUploaderName,setTotalLesson,setCourseName,setCourseDesc } = this.state\n        return (\n            <>\n               <section className='row my-4 justify-content-center align-items-center'>\n                    <div className='col-md-8'>\n                        <div className='card'>\n                            <div className='card-header'>\n                                Add course\n                            </div>\n                            <div className='card-body'>\n                                <Form onSubmit={this.addCourse}>\n                                    <Form.Group controlId=\"category\">\n                                        <Form.Label>Select Category</Form.Label>\n                                        <Form.Control as=\"select\" onChange={this.setCategory} value={ this.state.categoryValue }>\n                                            {\n                                                category_option.map((item,key) => {\n                                                    return (\n                                                        <>\n                                                            <option id={key} value={item.value}>{item.value}</option>\n                                                        </>   \n                                                    )\n                                                })\n                                            }                                           \n                                        </Form.Control>\n                                    </Form.Group>\n\n                                    <Form.Group controlId=\"level\">\n                                        <Form.Label>Select Level</Form.Label>\n                                        <Form.Control as=\"select\" onChange={this.setLevel} value={ this.state.levelValue }>\n                                            {\n                                                level_option.map((item,key) => {\n                                                    return (\n                                                        <>\n                                                            <option id={key} value={item.value}>{item.value}</option>\n                                                        </>   \n                                                    )\n                                                })\n                                            }                                           \n                                        </Form.Control>\n                                    </Form.Group>\n\n                                    <Form.Group controlId=\"price\">\n                                        <Form.Label>Select Price</Form.Label>\n                                        <Form.Control as=\"select\" onChange={this.setPrice} value={ this.state.priceValue }>\n                                            {\n                                                price_option.map((item,key) => {\n                                                    return (\n                                                        <>\n                                                            <option id={key} value={item.value}>{item.value}</option>\n                                                        </>   \n                                                    )\n                                                })\n                                            }                                           \n                                        </Form.Control>\n                                    </Form.Group>\n                                    {\n                                        setPrice ? \n                                        <Form.Group>  \n                                            <Form.Control type=\"number\" value={amount} onChange={this.setAmount} placeholder=\"Enter Price Here\" />\n                                        </Form.Group> : ''\n                                    }\n\n                                    <Form.Group controlId=\"language\">\n                                        <Form.Label>Select Languages</Form.Label>\n                                        <Form.Control as=\"select\" onChange={this.setLanguage} value={ this.state.langvalue } multiple>\n                                            {\n                                                languages_option.map((item,key) => {\n                                                    return (\n                                                        <>\n                                                            <option id={key} value={item.value}>{item.value} </option>\n                                                        </>   \n                                                    )\n                                                })\n                                            }                                           \n                                        </Form.Control>\n                                    </Form.Group>\n\n                                    \n                                    <Form.Group>  \n                                        <Form.Label>Uploader Name</Form.Label>\n                                        <Form.Control type=\"text\"  onChange={this.setUploaderName} value={setUploaderName} placeholder=\"Enter Course Uploaded Person name\" />\n                                    </Form.Group>\n                                    <Form.Group>  \n                                        <Form.Label>Total Lessons</Form.Label>\n                                        <Form.Control type=\"number\" onChange={this.setTotalLesson} value={setTotalLesson} placeholder=\"Enter Course Total Lesson count\" />\n                                    </Form.Group>\n                                    <Form.Group>  \n                                        <Form.Label>Course Name</Form.Label>\n                                        <Form.Control type=\"text\" onChange={this.setCourseName} value={setCourseName}  placeholder=\"Enter Course name\" />\n                                    </Form.Group>\n                                    <Form.Group>  \n                                        <Form.Label>Course Description</Form.Label>\n                                        <Form.Control type=\"text\" onChange={this.setCourseDesc} value={setCourseDesc}  placeholder=\"Enter Course Description\" />\n                                    </Form.Group>\n\n                                    <Form.Group>\n                                        <Form.File id=\"course_img\" onChange={this.setCourseImg}  label=\"Select course image\" />\n                                    </Form.Group>\n\n                                    <Form.Group>\n                                        <Form.File id=\"course__provider_img\" onChange={this.setProviderImg}  label=\"Select course Provider image\" />\n                                    </Form.Group>\n\n\n                                    <Button variant='primary' type='submit'>\n                                        Submit\n                                    </Button>\n                                </Form>\n                            </div>\n                        </div>        \n                    </div>\n                </section>        \n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        course_count : state.course.courses.length\n    }\n}\n  \n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        newCourse : (new_course) => dispatch(addNewCourse(new_course))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(AddCourse));",{"ruleId":"59","severity":1,"message":"60","line":3,"column":8,"nodeType":"61","messageId":"62","endLine":3,"endColumn":16},{"ruleId":"59","severity":1,"message":"63","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":16},{"ruleId":"59","severity":1,"message":"64","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":21},{"ruleId":"59","severity":1,"message":"65","line":6,"column":8,"nodeType":"61","messageId":"62","endLine":6,"endColumn":22},{"ruleId":"59","severity":1,"message":"66","line":7,"column":8,"nodeType":"61","messageId":"62","endLine":7,"endColumn":17},{"ruleId":"59","severity":1,"message":"67","line":8,"column":8,"nodeType":"61","messageId":"62","endLine":8,"endColumn":20},{"ruleId":"59","severity":1,"message":"68","line":9,"column":8,"nodeType":"61","messageId":"62","endLine":9,"endColumn":18},{"ruleId":"59","severity":1,"message":"69","line":10,"column":8,"nodeType":"61","messageId":"62","endLine":10,"endColumn":11},{"ruleId":"59","severity":1,"message":"70","line":11,"column":8,"nodeType":"61","messageId":"62","endLine":11,"endColumn":19},{"ruleId":"59","severity":1,"message":"71","line":12,"column":8,"nodeType":"61","messageId":"62","endLine":12,"endColumn":17},{"ruleId":"59","severity":1,"message":"72","line":725,"column":17,"nodeType":"61","messageId":"62","endLine":725,"endColumn":32},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"59","severity":1,"message":"77","line":4,"column":10,"nodeType":"61","messageId":"62","endLine":4,"endColumn":14},{"ruleId":"59","severity":1,"message":"78","line":270,"column":76,"nodeType":"61","messageId":"62","endLine":270,"endColumn":84},"no-unused-vars","'IBPS_Pic' is defined but never used.","Identifier","unusedVar","'Economic' is defined but never used.","'FinanceMarket' is defined but never used.","'FinanceService' is defined but never used.","'Statistic' is defined but never used.","'DataAnalysis' is defined but never used.","'Accountant' is defined but never used.","'GST' is defined but never used.","'MarketTrend' is defined but never used.","'Provider1' is defined but never used.","'FinalCourseList' is assigned a value but never used.","no-native-reassign",["79"],"no-negated-in-lhs",["80"],"'Link' is defined but never used.","'temp_obj' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]